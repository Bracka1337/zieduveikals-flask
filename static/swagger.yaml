openapi: 3.0.3
info:
  title: ZieduVeikals API
  description: API documentation for ZieduVeikals online store.
  version: 1.0.0
servers:
  - url: http://localhost:5000
    description: Development server
  - url: https://yourdomain.com
    description: Production server
tags:
  - name: Authentication
    description: User registration and login
  - name: Users
    description: User management
  - name: Products
    description: Product management
  - name: Cart
    description: Shopping cart operations
  - name: Orders
    description: Order processing
  - name: Promocodes
    description: Promocode management
  - name: Payments
    description: Payment processing
  - name: Admin
    description: Administrative operations

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Role:
      type: string
      enum:
        - ADMIN
        - USER
    Flower:
      type: string
      enum:
        - FLOWER
        - BOUQUET
    Status:
      type: string
      enum:
        - PENDING
        - COMPLETED
        - CANCELLED
    OptionType:
      type: string
      enum:
        - DEFAULT
        - COLOR
        - SIZE
        - MATERIAL
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@example.com
        role:
          $ref: '#/components/schemas/Role'
    Promocode:
      type: object
      properties:
        id:
          type: integer
          example: 1
        code:
          type: string
          example: SPRING20
        discount:
          type: number
          format: float
          example: 20.0
        count_usage:
          type: integer
          example: 100
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Red Roses
        price:
          type: number
          format: float
          example: 29.99
        quantity:
          type: integer
          example: 50
        short_description:
          type: string
          example: A beautiful bouquet of red roses.
        discount:
          type: integer
          example: 10
        is_featured:
          type: boolean
          example: true
        type:
          $ref: '#/components/schemas/Flower'
        options:
          type: array
          items:
            $ref: '#/components/schemas/Option'
    Option:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Color
        description:
          type: string
          example: Choose the color of the roses.
        type:
          $ref: '#/components/schemas/OptionType'
        images:
          type: array
          items:
            type: string
            format: uri
            example: https://example.com/image1.jpg
    Image:
      type: object
      properties:
        id:
          type: integer
          example: 1
        url:
          type: string
          format: uri
          example: https://example.com/image1.jpg
    CartItem:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 2
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          example: 1
        order_id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: float
          example: 29.99
        product_name:
          type: string
          example: Red Roses
        product_description:
          type: string
          example: A beautiful bouquet of red roses.
        product_photo:
          type: string
          format: uri
          example: https://example.com/image1.jpg
    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        status:
          $ref: '#/components/schemas/Status'
        created_at:
          type: string
          format: date-time
          example: "2023-10-14T12:34:56Z"
        order_id:
          type: string
          example: "cs_test_a1b2c3d4"
        promocode_id:
          type: integer
          example: 1
        promocode:
          $ref: '#/components/schemas/Promocode'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@example.com
        password:
          type: string
          format: password
          example: strongpassword123
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: johndoe
        password:
          type: string
          format: password
          example: strongpassword123
    RefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    ChangePasswordRequest:
      type: object
      required:
        - old_password
        - new_password
      properties:
        old_password:
          type: string
          format: password
          example: oldpassword123
        new_password:
          type: string
          format: password
          example: newpassword456
    ResetPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: johndoe@example.com
    ResetPasswordConfirmRequest:
      type: object
      required:
        - password
        - token
      properties:
        password:
          type: string
          format: password
          example: newpassword456
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    AddToCartRequest:
      type: object
      required:
        - products
      properties:
        products:
          type: array
          items:
            type: object
            required:
              - id
              - quantity
            properties:
              id:
                type: integer
                example: 1
              quantity:
                type: integer
                example: 2
    BuyResponse:
      type: object
      properties:
        payment_link:
          type: string
          format: uri
          example: https://checkout.stripe.com/pay/cs_test_a1b2c3d4
    PromocodeApplyRequest:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          example: SPRING20

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /login:
    post:
      tags:
        - Authentication
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Missing credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
        '400':
          description: Missing refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /change_password:
    patch:
      tags:
        - Authentication
      summary: Change user password
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /reset-password:
    post:
      tags:
        - Authentication
      summary: Initiate password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset link sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Invalid input or email not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /reset:
    get:
      tags:
        - Authentication
      summary: Verify password reset token
      parameters:
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: Password reset token
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    post:
      tags:
        - Authentication
      summary: Reset password using token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordConfirmRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Invalid input or token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /product/{id}:
    get:
      tags:
        - Products
      summary: Get product details by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    patch:
      tags:
        - Products
        - Admin
      summary: Update product details
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                  format: float
                quantity:
                  type: integer
                short_description:
                  type: string
                discount:
                  type: integer
                is_featured:
                  type: boolean
                type:
                  $ref: '#/components/schemas/Flower'
                options:
                  type: array
                  items:
                    $ref: '#/components/schemas/Option'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  product:
                    $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      tags:
        - Products
        - Admin
      summary: Delete a product by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /products:
    get:
      tags:
        - Products
      summary: Get list of all products
      responses:
        '200':
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
    post:
      tags:
        - Products
        - Admin
      summary: Create a new product
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - quantity
                - type
                - short_description
              properties:
                name:
                  type: string
                  example: White Lilies
                price:
                  type: number
                  format: float
                  example: 19.99
                quantity:
                  type: integer
                  example: 30
                type:
                  $ref: '#/components/schemas/Flower'
                short_description:
                  type: string
                  example: Elegant white lilies bouquet.
                discount:
                  type: integer
                  example: 5
                is_featured:
                  type: boolean
                  example: false
                options:
                  type: array
                  items:
                    $ref: '#/components/schemas/Option'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  product:
                    $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /featured_products:
    get:
      tags:
        - Products
      summary: Get list of featured products
      responses:
        '200':
          description: List of featured products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
  /get_users:
    get:
      tags:
        - Users
        - Admin
      summary: Get list of all users (excluding the current admin)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 2
                        username:
                          type: string
                          example: janedoe
                        email:
                          type: string
                          format: email
                          example: janedoe@example.com
                        role:
                          $ref: '#/components/schemas/Role'
                        promocode:
                          $ref: '#/components/schemas/Promocode'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /user/{user_id}:
    get:
      tags:
        - Users
        - Admin
      summary: Get user details by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: User ID
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      username:
                        type: string
                        example: janedoe
                      email:
                        type: string
                        format: email
                        example: janedoe@example.com
                      role:
                        $ref: '#/components/schemas/Role'
                      promocode:
                        $ref: '#/components/schemas/Promocode'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    patch:
      tags:
        - Users
        - Admin
      summary: Update user details by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: janedoe_updated
                email:
                  type: string
                  format: email
                  example: janedoe_new@example.com
                role:
                  $ref: '#/components/schemas/Role'
                promocode_id:
                  type: integer
                  example: 2
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Invalid input or no valid fields to update
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User or Promocode not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      tags:
        - Users
        - Admin
      summary: Delete a user by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: User ID
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /add:
    post:
      tags:
        - Cart
      summary: Add products to cart
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToCartRequest'
      responses:
        '201':
          description: Products added to cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  total_price:
                    type: number
                    format: float
        '400':
          description: No products provided or invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: No products found or product quantity is 0
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /cart:
    get:
      tags:
        - Cart
      summary: View cart items
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Cart items retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  cart_items:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        product_id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Red Roses
                        price:
                          type: number
                          format: float
                          example: 29.99
                        quantity:
                          type: integer
                          example: 2
                        discount:
                          type: integer
                          example: 10
                        short_description:
                          type: string
                          example: A beautiful bouquet of red roses.
                        actual_quantity:
                          type: integer
                          example: 50
                        message:
                          type: string
                          example: Product quantity updated
                  promocode:
                    $ref: '#/components/schemas/Promocode'
        '404':
          description: No products found or product quantity is 0
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      tags:
        - Cart
      summary: Clear all items from cart
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Cart cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /cart/{id}:
    patch:
      tags:
        - Cart
      summary: Update cart item quantity
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Cart Item ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  example: 3
      responses:
        '200':
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid quantity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Cart item or associated product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      tags:
        - Cart
      summary: Delete a specific cart item
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Cart Item ID
      responses:
        '200':
          description: Cart item deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /buy:
    post:
      tags:
        - Orders
        - Payments
      summary: Initiate purchase of cart items
      security:
        - BearerAuth: []
      responses:
        '201':
          description: Payment link created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyResponse'
        '400':
          description: Pending order exists or invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: No products found or product quantity is 0
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /webhook:
    post:
      tags:
        - Payments
      summary: Stripe webhook endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  example: checkout.session.completed
                data:
                  type: object
                  properties:
                    object:
                      type: object
                      properties:
                        id:
                          type: string
                          example: cs_test_a1b2c3d4
                        payment_status:
                          type: string
                          example: paid
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Unhandled event type
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
  /orders:
    get:
      tags:
        - Orders
      summary: Get list of orders
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /promocodes:
    get:
      tags:
        - Promocodes
        - Admin
      summary: Get list of promocodes
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of promocodes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  promocodes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Promocode'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    post:
      tags:
        - Promocodes
        - Admin
      summary: Create a new promocode
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
                - discount
                - count_usage
              properties:
                code:
                  type: string
                  example: SPRING20
                discount:
                  type: number
                  format: float
                  example: 20.0
                count_usage:
                  type: integer
                  example: 100
      responses:
        '201':
          description: Promocode created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  code:
                    type: string
                  discount:
                    type: number
                    format: float
                  count_usage:
                    type: integer
        '400':
          description: Missing required fields or promocode already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /promocode/{id}:
    post:
      tags:
        - Promocodes
        - Users
      summary: Apply a promocode to the current user
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Promocode ID (code string)
      responses:
        '200':
          description: Promocode applied successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: Promocode not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    patch:
      tags:
        - Promocodes
        - Admin
      summary: Update a promocode by code
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Promocode code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: SPRING25
                discount:
                  type: number
                  format: float
                  example: 25.0
                count_usage:
                  type: integer
                  example: 150
      responses:
        '200':
          description: Promocode updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  id:
                    type: integer
                  code:
                    type: string
                  discount:
                    type: number
                    format: float
                  count_usage:
                    type: integer
        '403':
          description: Unauthorized (non-admin user)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Promocode not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      tags:
        - Promocodes
        - Admin
      summary: Delete a promocode by code
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Promocode code
      responses:
        '200':
          description: Promocode deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '403':
          description: Unauthorized (non-admin user)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Promocode not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /make_admin:
    post:
      tags:
        - Admin
      summary: Make current user an admin (Development only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User promoted to admin successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

security:
  - BearerAuth: []
